<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Learning Management System Load Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="project_id" elementType="Argument">
            <stringProp name="Argument.name">project_id</stringProp>
            <stringProp name="Argument.value">${__P(project, span-cloud-testing)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="instance" elementType="Argument">
            <stringProp name="Argument.name">instance</stringProp>
            <stringProp name="Argument.value">${__P(instance, machmeter-lms-test)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="db" elementType="Argument">
            <stringProp name="Argument.name">db</stringProp>
            <stringProp name="Argument.value">${__P(database, lms-database)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="threads" elementType="Argument">
            <stringProp name="Argument.name">threads</stringProp>
            <stringProp name="Argument.value">${__P(threads,50)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="rampUp_Time" elementType="Argument">
            <stringProp name="Argument.name">rampUp_Time</stringProp>
            <stringProp name="Argument.value">${__P(rampUp_Time,5)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="startUp_Delay" elementType="Argument">
            <stringProp name="Argument.name">startUp_Delay</stringProp>
            <stringProp name="Argument.value">${__P(startUp_Delay,5)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="duration" elementType="Argument">
            <stringProp name="Argument.name">duration</stringProp>
            <stringProp name="Argument.value">${__P(duration,604800)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="iterations" elementType="Argument">
            <stringProp name="Argument.name">iterations</stringProp>
            <stringProp name="Argument.value">${__P(iterations,10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="grpc_channel" elementType="Argument">
            <stringProp name="Argument.name">grpc_channel</stringProp>
            <stringProp name="Argument.value">${__P(grpc_channel,50)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="connections" elementType="Argument">
            <stringProp name="Argument.name">connections</stringProp>
            <stringProp name="Argument.value">${__P(connections, 1000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath">/test/</stringProp>
    </TestPlan>
    <hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp: create spanner connection" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Create connections" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.google.cloud.spanner.*;

String projectId = &quot;${project_id}&quot;;
String instanceId = &quot;${instance}&quot;;
String databaseId = &quot;${db}&quot;;
int sessions = ${connections};
int channels = ${grpc_channel};
SessionPoolOptions sessionPool = SessionPoolOptions.newBuilder()
                .setMinSessions(sessions)
                .setMaxSessions(sessions)
                .build();
                
SpannerOptions options = SpannerOptions.newBuilder()
      .setNumChannels(channels)
      .setSessionPoolOption(sessionPool)
      .build();
Spanner spanner = options.getService();
DatabaseClient dbClient = spanner.getDatabaseClient(DatabaseId.of(projectId, instanceId, databaseId));

props.put(&quot;spanner&quot;, spanner);
props.put(&quot;dbClient&quot;, dbClient);

SampleResult.setRequestHeaders(spanner.toString());</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Create CSV of instructorIDs" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import com.google.cloud.spanner.*;


DatabaseClient dbClient = props.get(&quot;dbClient&quot;);
String readInstructorIdSql=&quot;SELECT id FROM instructors TABLESAMPLE BERNOULLI (50 PERCENT) limit 10000;&quot;;
Statement stmt = Statement.newBuilder(readInstructorIdSql).build();
ResultSet result = dbClient
	.singleUseReadOnlyTransaction()
	.executeQuery(stmt);

StringBuilder fileContent = new StringBuilder();
while (result.next()) {
	fileContent.append(result.getString(0));
	fileContent.append(System.getProperty(&quot;line.separator&quot;));
}
result.close();
FileWriter fWriter = new FileWriter(&quot;instructorIDs.csv&quot;, false);
BufferedWriter buff = new BufferedWriter(fWriter);

buff.write(fileContent.toString());

buff.close();
fWriter.close();
</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Create CSV for StudentIDs" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import com.google.cloud.spanner.*;


DatabaseClient dbClient = props.get(&quot;dbClient&quot;);
String readStudentIdSql=&quot;SELECT id FROM students TABLESAMPLE BERNOULLI (50 PERCENT) limit 10000;&quot;;
Statement stmt = Statement.newBuilder(readStudentIdSql).build();
ResultSet result = dbClient
	.singleUseReadOnlyTransaction()
	.executeQuery(stmt);

StringBuilder fileContent = new StringBuilder();
while (result.next()) {
	fileContent.append(result.getString(0));
	fileContent.append(System.getProperty(&quot;line.separator&quot;));
}
result.close();
FileWriter fWriter = new FileWriter(&quot;studentIDs.csv&quot;, false);
BufferedWriter buff = new BufferedWriter(fWriter);

buff.write(fileContent.toString());

buff.close();
fWriter.close();</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Create CSV for CourseIDs" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import com.google.cloud.spanner.*;


DatabaseClient dbClient = props.get(&quot;dbClient&quot;);
String readCourseIdSql=&quot;SELECT course_id FROM courses TABLESAMPLE BERNOULLI (50 PERCENT) limit 10000;&quot;;
Statement stmt = Statement.newBuilder(readCourseIdSql).build();
ResultSet result = dbClient
	.singleUseReadOnlyTransaction()
	.executeQuery(stmt);

StringBuilder fileContent = new StringBuilder();
while (result.next()) {
	fileContent.append(result.getString(0));
	fileContent.append(System.getProperty(&quot;line.separator&quot;));
}
result.close();
FileWriter fWriter = new FileWriter(&quot;courseIDs.csv&quot;, false);
BufferedWriter buff = new BufferedWriter(fWriter);

buff.write(fileContent.toString());

buff.close();
fWriter.close();</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Create CSV for EnrollmentIDs" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import com.google.cloud.spanner.*;


DatabaseClient dbClient = props.get(&quot;dbClient&quot;);
String readEnrollmentIdSql=&quot;SELECT enrollment_id FROM student_enrolled_courses TABLESAMPLE BERNOULLI (50 PERCENT) limit 10000;&quot;;
Statement stmt = Statement.newBuilder(readEnrollmentIdSql).build();
ResultSet result = dbClient
	.singleUseReadOnlyTransaction()
	.executeQuery(stmt);

StringBuilder fileContent = new StringBuilder();
while (result.next()) {
	fileContent.append(result.getString(0));
	fileContent.append(System.getProperty(&quot;line.separator&quot;));
}
result.close();
FileWriter fWriter = new FileWriter(&quot;enrollmentIDs.csv&quot;, false);
BufferedWriter buff = new BufferedWriter(fWriter);

buff.write(fileContent.toString());

buff.close();
fWriter.close();</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Master Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${threads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramUp_time}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">${startUp_Delay}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Instructor IDs CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">instructorIDs.csv</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">instructorId</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Student IDs CSV Data Set Config" enabled="true">
          <stringProp name="filename">studentIDs.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">studentId</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Course IDs CSV Data Set Config" enabled="true">
          <stringProp name="filename">courseIDs.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">courseId</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Enrollment IDs CSV Data Set Config" enabled="true">
          <stringProp name="filename">enrollmentIDs.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">enrollmentId</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="TPC: Reads" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">false</boolProp>
          <intProp name="ThroughputController.maxThroughput">1</intProp>
          <FloatProperty>
            <name>ThroughputController.percentThroughput</name>
            <value>90.0</value>
            <savedValue>0.0</savedValue>
          </FloatProperty>
        </ThroughputController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Random Reads On Courses" enabled="true"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Read Courses By CourseId" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import com.google.cloud.spanner.*;


String courseId = vars.get(&quot;courseId&quot;);
String readCourseSql = &quot;SELECT * FROM courses WHERE course_id = @courseId;&quot;;
Statement stmt = Statement.newBuilder(readCourseSql)
 .bind(&quot;courseId&quot;).to(courseId)
 .build();
DatabaseClient dbClient = props.get(&quot;dbClient&quot;);
ResultSet result = dbClient
 .singleUseReadOnlyTransaction()
 .executeQuery(stmt);
while(result.next()) {}
result.close();
</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Read Courses By InstructorId" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import com.google.cloud.spanner.*;


String instructorId = vars.get(&quot;instructorId&quot;);
String readCourseSql = &quot;SELECT course_id, course_name FROM courses WHERE instructor_id = @instructorId;&quot;;
Statement stmt = Statement.newBuilder(readCourseSql)
 .bind(&quot;instructorId&quot;).to(instructorId)
 .build();
DatabaseClient dbClient = props.get(&quot;dbClient&quot;);
ResultSet result = dbClient
 .singleUseReadOnlyTransaction()
 .executeQuery(stmt);
while(result.next()) {}
result.close();
</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Read using index GetCourseByCategory" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import com.google.cloud.spanner.*;


DatabaseClient dbClient = props.get(&quot;dbClient&quot;);
ResultSet result = dbClient
 .singleUse()
 .readUsingIndex(
              &quot;courses&quot;,
              &quot;GetCourseByCategory&quot;,
              KeySet.all(),
              Arrays.asList(&quot;course_id&quot;, &quot;category&quot;));
while(result.next()) {}
result.close();
</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="update based on timestamp" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import com.google.cloud.spanner.*;
import java.time.Instant;

Instant exampleTimestamp = Instant.now();
  Statement statement =
      Statement.newBuilder(
              &quot;UPDATE students SET email_id = &apos;none&apos; &quot;
                  + &quot;WHERE enroll_date &lt; @lastUpdateTime&quot;)
          .bind(&quot;lastUpdateTime&quot;)
          .to(exampleTimestamp.toString())
          .build();
DatabaseClient dbClient = props.get(&quot;dbClient&quot;);
/*ResultSet result = dbClient
 .singleUse()
 .executeQuery(statement);*/
 dbClient
      .readWriteTransaction()
      .run(transaction -&gt; {
        long rowCount = transaction.executeUpdate(statement);
        System.out.printf(&quot;%d record updated.\n&quot;, rowCount);
        return null;
      });
//while(result.next()) {}
//result.close();
</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="TPC: Update" enabled="false">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">false</boolProp>
          <intProp name="ThroughputController.maxThroughput">1</intProp>
          <FloatProperty>
            <name>ThroughputController.percentThroughput</name>
            <value>7.0</value>
            <savedValue>0.0</savedValue>
          </FloatProperty>
        </ThroughputController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Random Update" enabled="true"/>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">Random randomNum = new Random();
int number = randomNum.nextInt(2);
vars.put(&quot;randomSampler&quot;, &quot;&quot;+ number);
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
            <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch Controller" enabled="true">
              <stringProp name="SwitchController.value">${__groovy(&quot;${randomSampler}&quot;.toInteger())}</stringProp>
            </SwitchController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Update Item" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import com.google.cloud.spanner.*;
import java.util.*;
import com.google.cloud.Timestamp;
import org.apache.commons.lang3.RandomStringUtils;
import java.lang.Long


String itemId = vars.get(&quot;itemId&quot;);
Random rand = new Random();
float price = rand.nextFloat()* (1000 - 1) + 1;
int quantity = rand.nextInt(100);

List&lt;Mutation&gt; mutations =
      Arrays.asList(
              Mutation.newUpdateBuilder(&quot;Item&quot;)
                      .set(&quot;ItemID&quot;)
                      .to(itemId)
                      .set(&quot;Price&quot;)
                      .to(price)
                      .set(&quot;Quantity&quot;)
                      .to(quantity)
                      .build());
DatabaseClient dbClient = props.get(&quot;dbClient&quot;);                      
dbClient.write(mutations);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Update ShoppingCart" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import com.google.cloud.spanner.*;
import java.util.*;
import com.google.cloud.Timestamp;
import org.apache.commons.lang3.RandomStringUtils;
import java.lang.Long


String shoppingCartId = vars.get(&quot;shoppingCartId&quot;);
String status = RandomStringUtils.randomAlphabetic(50);

List&lt;Mutation&gt; mutations =
      Arrays.asList(
              Mutation.newUpdateBuilder(&quot;ShoppingCart&quot;)
                      .set(&quot;ShoppingCartID&quot;)
                      .to(shoppingCartId)
                      .set(&quot;Status&quot;)
                      .to(status)
                      .build());
DatabaseClient dbClient = props.get(&quot;dbClient&quot;);                      
dbClient.write(mutations);</stringProp>
              </JSR223Sampler>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="TPC: Insert" enabled="false">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">false</boolProp>
          <intProp name="ThroughputController.maxThroughput">1</intProp>
          <FloatProperty>
            <name>ThroughputController.percentThroughput</name>
            <value>3.0</value>
            <savedValue>0.0</savedValue>
          </FloatProperty>
        </ThroughputController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Random Insert" enabled="true"/>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">Random randomNum = new Random();
int number = randomNum.nextInt(2);
vars.put(&quot;randomSampler&quot;, &quot;&quot;+ number);
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
            <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch Controller" enabled="true">
              <stringProp name="SwitchController.value">${__groovy(&quot;${randomSampler}&quot;.toInteger())}</stringProp>
            </SwitchController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Insert item" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import com.google.cloud.spanner.*;
import java.util.*;
import java.time.Instant;
import com.google.cloud.Timestamp;
import org.apache.commons.lang3.RandomStringUtils;


Random rand = new Random();
String itemID = RandomStringUtils.randomAlphabetic(36);
String description = RandomStringUtils.randomAlphabetic(100);
float price = rand.nextFloat()* (1000 - 1) + 1;
int quantity = rand.nextInt(100);
int onHold = rand.nextInt(100);
List&lt;Mutation&gt; mutations =
      Arrays.asList(
              Mutation.newInsertBuilder(&quot;Item&quot;)
                      .set(&quot;ItemID&quot;)
                      .to(itemID)
                      .set(&quot;Description&quot;)
                      .to(description)
                      .set(&quot;Price&quot;)
                      .to(price)
                      .set(&quot;Quantity&quot;)
                      .to(quantity)
                      .set(&quot;OnHold&quot;)
                      .to(onHold)
                      .set(&quot;LastUpdated&quot;)
                      .to(Instant.now().toString())
                      .build());
DatabaseClient dbClient = props.get(&quot;dbClient&quot;);
dbClient.write(mutations);
</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Insert ShoppingCart" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import com.google.cloud.spanner.*;
import java.util.*;
import java.time.Instant;
import com.google.cloud.Timestamp;
import org.apache.commons.lang3.RandomStringUtils;



String shoppingCartID = RandomStringUtils.randomAlphabetic(36);
String status = RandomStringUtils.randomAlphabetic(50);
String userName = RandomStringUtils.randomAlphabetic(100);
List&lt;Mutation&gt; mutations =
      Arrays.asList(
              Mutation.newInsertBuilder(&quot;ShoppingCart&quot;)
                      .set(&quot;ShoppingCartID&quot;)
                      .to(shoppingCartID)
                      .set(&quot;Status&quot;)
                      .to(status)
                      .set(&quot;UserName&quot;)
                      .to(userName)
                      .set(&quot;LastUpdated&quot;)
                      .to(Instant.now().toString())
                      .build());
DatabaseClient dbClient = props.get(&quot;dbClient&quot;);
dbClient.write(mutations);
</stringProp>
              </JSR223Sampler>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="Backend Listener" enabled="true">
          <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="influxdbMetricsSender" elementType="Argument">
                <stringProp name="Argument.name">influxdbMetricsSender</stringProp>
                <stringProp name="Argument.value">org.apache.jmeter.visualizers.backend.influxdb.HttpMetricsSender</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="influxdbUrl" elementType="Argument">
                <stringProp name="Argument.name">influxdbUrl</stringProp>
                <stringProp name="Argument.value">http://jmeter-influxdb:8086/write?db=jmeter</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="application" elementType="Argument">
                <stringProp name="Argument.name">application</stringProp>
                <stringProp name="Argument.value">application name</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="measurement" elementType="Argument">
                <stringProp name="Argument.name">measurement</stringProp>
                <stringProp name="Argument.value">jmeter</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="summaryOnly" elementType="Argument">
                <stringProp name="Argument.name">summaryOnly</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="samplersRegex" elementType="Argument">
                <stringProp name="Argument.name">samplersRegex</stringProp>
                <stringProp name="Argument.value">.*</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="percentiles" elementType="Argument">
                <stringProp name="Argument.name">percentiles</stringProp>
                <stringProp name="Argument.value">99;95;90</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="testTitle" elementType="Argument">
                <stringProp name="Argument.name">testTitle</stringProp>
                <stringProp name="Argument.value">Test name</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="eventTags" elementType="Argument">
                <stringProp name="Argument.name">eventTags</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="classname">org.apache.jmeter.visualizers.backend.influxdb.InfluxdbBackendListenerClient</stringProp>
        </BackendListener>
        <hashTree/>
      </hashTree>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="tearDown: close spanner connection" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </PostThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Release connection" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">props.get(&quot;spanner&quot;).close();</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
