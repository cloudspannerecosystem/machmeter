<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Scenario 1 Cloud Spanner Initial Load" enabled="true">
      <stringProp name="TestPlan.comments">Populates the tbl_device_profile with dummy data</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="project" elementType="Argument">
            <stringProp name="Argument.name">project</stringProp>
            <stringProp name="Argument.value">${__P(project, default)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="instance" elementType="Argument">
            <stringProp name="Argument.name">instance</stringProp>
            <stringProp name="Argument.value">${__P(instance, default)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="database" elementType="Argument">
            <stringProp name="Argument.name">database</stringProp>
            <stringProp name="Argument.value">${__P(database, default)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="connections" elementType="Argument">
            <stringProp name="Argument.name">connections</stringProp>
            <stringProp name="Argument.value">${__P(connections, 1000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="channels" elementType="Argument">
            <stringProp name="Argument.name">channels</stringProp>
            <stringProp name="Argument.value">${__P(channels, 10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="users" elementType="Argument">
            <stringProp name="Argument.name">users</stringProp>
            <stringProp name="Argument.value">${__P(users, 10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="iterations" elementType="Argument">
            <stringProp name="Argument.name">iterations</stringProp>
            <stringProp name="Argument.value">${__P(iterations, 5)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath">/test/</stringProp>
    </TestPlan>
    <hashTree>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery"></stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="connectionProperties"></stringProp>
        <stringProp name="dataSource">conn_pool</stringProp>
        <stringProp name="dbUrl">jdbc:cloudspanner:/projects/${project}/instances/${instance}/databases/${database}?minSessions=${connections};maxSessions=${connections};numChannels=${channels}</stringProp>
        <stringProp name="driver">com.google.cloud.spanner.jdbc.JdbcDriver</stringProp>
        <stringProp name="initQuery"></stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password"></stringProp>
        <stringProp name="poolMax">${connections}</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Insert Data" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${iterations}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="tbl_device_profile insert" enabled="true">
          <stringProp name="dataSource">conn_pool</stringProp>
          <stringProp name="query">insert into tbl_device_profile (device_id, user_ref_id	, biometric_uuid, is_active, fcm_token) values (?,?,?,?,?);</stringProp>
          <stringProp name="queryArguments">${DeviceId},${UserId},${BioId},${isActive},${FcmToken}</stringProp>
          <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,BOOLEAN,VARCHAR</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Prepared Update Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="1173835313">DeviceId</stringProp>
              <stringProp name="-1752163738">UserId</stringProp>
              <stringProp name="64189475">BioId</stringProp>
              <stringProp name="-748916528">isActive</stringProp>
              <stringProp name="-1687210839">FcmToken</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="513946673">
                <stringProp name="118040362">${__UUID()}</stringProp>
                <stringProp name="-1014332434">${__RandomString(41,abcdefghijklmnopqrstuvwxyz1234567890)}</stringProp>
                <stringProp name="118040362">${__UUID()}</stringProp>
                <stringProp name="-732310053">${__Random(0,1)}</stringProp>
                <stringProp name="291540939">${__RandomString(128, abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890:)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
            <stringProp name="TestPlan.comments">Random generated values to populate database</stringProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="tbl_migrated_user insert" enabled="true">
          <stringProp name="dataSource">conn_pool</stringProp>
          <stringProp name="query">insert into tbl_migrated_user (old_user_id, user_ref_id, is_initialized) values (?,?,?);</stringProp>
          <stringProp name="queryArguments">${OldUserId},${UserId},${isInit}</stringProp>
          <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,BOOLEAN</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Prepared Update Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-711168211">OldUserId</stringProp>
              <stringProp name="-1180417702">isInit</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-516153238">
                <stringProp name="1959261130">${__RandomString(12,abcdefghijklmnopqrstuvwxyz1234567890)}</stringProp>
                <stringProp name="-732310053">${__Random(0,1)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
            <stringProp name="TestPlan.comments">Random generated values to populate database</stringProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="tbl_mobile_detect insert" enabled="true">
          <stringProp name="dataSource">conn_pool</stringProp>
          <stringProp name="query">insert into tbl_mobile_detect  (device_id, detected_mobile_no, timestamp) values (?,?,?);</stringProp>
          <stringProp name="queryArguments">${DeviceId},${DeviceMobileNo},${Time}</stringProp>
          <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,TIMESTAMP</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Prepared Update Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-1988848999">DeviceMobileNo</stringProp>
              <stringProp name="2606829">Time</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="1862760655">
                <stringProp name="-1715179747">${__RandomString(12,1234567890)}</stringProp>
                <stringProp name="-1728534736">${__time(yyyy-MM-dd hh:mm:ss)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
            <stringProp name="TestPlan.comments">Random generated values to populate database</stringProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="tbl_profile_transaction_limit insert" enabled="true">
          <stringProp name="dataSource">conn_pool</stringProp>
          <stringProp name="query">insert into tbl_profile_transaction_limit (user_ref_id, transaction_group, limit_amount) values (?,?,?);</stringProp>
          <stringProp name="queryArguments">${UserId},${TxnGroup},${LimitAmt}</stringProp>
          <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,INTEGER</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Prepared Update Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-1583244715">TxnGroup</stringProp>
              <stringProp name="1229274157">LimitAmt</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-1459522354">
                <stringProp name="-784353466">${__RandomString(16,abcdefghijklmnopqrstuvwxyz1234567890)}</stringProp>
                <stringProp name="-540605380">${__Random(10000,100000)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
            <stringProp name="TestPlan.comments">Random generated values to populate database</stringProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="tbl_quick_link_favorite insert" enabled="true">
          <stringProp name="dataSource">conn_pool</stringProp>
          <stringProp name="query">insert into tbl_quick_link_favorite  (favorite_ref_id, user_ref_id, favorite_nickname, transaction_type, transfer_type, to_bank_code, sort_order, to_proxy_type, to_icon_url, is_category_icon   ) values (?,?,?,?,?,?,?,?,?,?);</stringProp>
          <stringProp name="queryArguments">${FavId},${UserId},${FavNickName},${TxnType},${TranferType},${toBankCode},${SortOrder},${toProxyType},${toIconUrl},${isCategoryIcon}</stringProp>
          <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,INTEGER,VARCHAR,VARCHAR,BOOLEAN</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Prepared Update Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="67651958">FavId</stringProp>
              <stringProp name="-1511364439">FavNickName</stringProp>
              <stringProp name="780605604">TxnType</stringProp>
              <stringProp name="-1979178523">TransferType</stringProp>
              <stringProp name="-1879674396">toBankCode</stringProp>
              <stringProp name="1977193520">SortOrder</stringProp>
              <stringProp name="-1098116467">toProxyType</stringProp>
              <stringProp name="-24450245">toIconUrl</stringProp>
              <stringProp name="-335433503">isCategoryIcon</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="490624764">
                <stringProp name="-1014332434">${__RandomString(41,abcdefghijklmnopqrstuvwxyz1234567890)}</stringProp>
                <stringProp name="1395408141">${__RandomString(20,abcdefghijklmnopqrstuvwxyz1234567890)}</stringProp>
                <stringProp name="1283686443">${__RandomString(16,ABCDEFGHIJKLMNOPQRSTUVWXYZ)}</stringProp>
                <stringProp name="1283686443">${__RandomString(16,ABCDEFGHIJKLMNOPQRSTUVWXYZ)}</stringProp>
                <stringProp name="1093203260">${__RandomString(3,ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789)}</stringProp>
                <stringProp name="-362863940">${__Random(1,1000)}</stringProp>
                <stringProp name="1283686443">${__RandomString(16,ABCDEFGHIJKLMNOPQRSTUVWXYZ)}</stringProp>
                <stringProp name="1249342803">${__RandomString(41,abcdefghijklmnopqrstuvwxyz1234567890:/-=)}</stringProp>
                <stringProp name="-732310053">${__Random(0,1)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
            <stringProp name="TestPlan.comments">Random generated values to populate database</stringProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="tbl_segment insert" enabled="true">
          <stringProp name="dataSource">conn_pool</stringProp>
          <stringProp name="query">insert into tbl_segment  (segment_id, segment, segment_display_name_th, segment_display_name_en) values (?,?,?,?);</stringProp>
          <stringProp name="queryArguments">${SegmentId},${Segment},${SegmentDisplayNameTH},${SegmentDisplayNameEN}</stringProp>
          <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,VARCHAR</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Prepared Update Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="376162190">SegmentId</stringProp>
              <stringProp name="-656591085">Segment</stringProp>
              <stringProp name="1513703758">SegmentDisplayNameTH</stringProp>
              <stringProp name="1513703299">SegmentDisplayNameEN</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="1606322372">
                <stringProp name="357265756">${__Random(1,1000000)}</stringProp>
                <stringProp name="-784353466">${__RandomString(16,abcdefghijklmnopqrstuvwxyz1234567890)}</stringProp>
                <stringProp name="1757439774">${__RandomString(40,กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรลวศษสหฬอฮ)}</stringProp>
                <stringProp name="1061147041">${__RandomString(40,ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
            <stringProp name="TestPlan.comments">Random generated values to populate database</stringProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="tbl_transaction_limit insert" enabled="true">
          <stringProp name="dataSource">conn_pool</stringProp>
          <stringProp name="query">insert into tbl_transaction_limit  (segment, transaction_group, daily_limit, default_daily_limit ) values (?,?,?,?);</stringProp>
          <stringProp name="queryArguments">${Segment},${TxnGroup},${DailyLimitAmt},${DefaultLimitAmt}</stringProp>
          <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,INTEGER,INTEGER</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Prepared Update Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-1014750938">DailyLimitAmt</stringProp>
              <stringProp name="-2129266354">DefaultLimitAmt</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-1788251496">
                <stringProp name="2135668664">${__Random(10000,500000)}</stringProp>
                <stringProp name="-540605380">${__Random(10000,100000)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
            <stringProp name="TestPlan.comments">Random generated values to populate database</stringProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="tbl_user_default_quick_action insert" enabled="true">
          <stringProp name="dataSource">conn_pool</stringProp>
          <stringProp name="query">insert into tbl_user_default_quick_action  (user_ref_id, multiple_quick_action_code, version, created_date_time, created_by, updated_date_time,updated_by  ) values (?,?,?,?,?,?,?);</stringProp>
          <stringProp name="queryArguments">${UserId},${MulQwkActCode},${Version},${CreatedTime},${CreatedBy},${UpdatedTime},${UpdatedBy}</stringProp>
          <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,TIMESTAMP,VARCHAR,TIMESTAMP,VARCHAR</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Prepared Update Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-769216098">MulQwkActCode</stringProp>
              <stringProp name="2016261304">Version</stringProp>
              <stringProp name="1177958837">CreatedTime</stringProp>
              <stringProp name="-1692627649">CreatedBy</stringProp>
              <stringProp name="1098086920">UpdatedTime</stringProp>
              <stringProp name="54773330">UpdatedBy</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="1182913607">
                <stringProp name="291540939">${__RandomString(128, abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890:)}</stringProp>
                <stringProp name="-704062497">${__RandomString(10,1234567890)}</stringProp>
                <stringProp name="-1728534736">${__time(yyyy-MM-dd hh:mm:ss)}</stringProp>
                <stringProp name="-116605424">${__RandomString(50,abcdefghijklmnopqrstuvwxyz1234567890)}</stringProp>
                <stringProp name="-1728534736">${__time(yyyy-MM-dd hh:mm:ss)}</stringProp>
                <stringProp name="-116605424">${__RandomString(50,abcdefghijklmnopqrstuvwxyz1234567890)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
            <stringProp name="TestPlan.comments">Random generated values to populate database</stringProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="tbl_user_preference_quick_action insert" enabled="true">
          <stringProp name="dataSource">conn_pool</stringProp>
          <stringProp name="query">insert into tbl_user_preference_quick_action (user_ref_id, quick_actions, created_date_time, created_by, updated_date_time, updated_by) values (?,?,?,?,?,?);</stringProp>
          <stringProp name="queryArguments">${UserId},${QwkAct},${CreatedTime},${CreatedBy},${UpdatedTime},${UpdatedBy}</stringProp>
          <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,TIMESTAMP,VARCHAR,TIMESTAMP,VARCHAR</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Prepared Update Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-1862853779">QwkAct</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="1945800907">
                <stringProp name="291540939">${__RandomString(128, abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890:)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
            <stringProp name="TestPlan.comments">Random generated values to populate database</stringProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="tbl_user_quick_actions insert" enabled="true">
          <stringProp name="dataSource">conn_pool</stringProp>
          <stringProp name="query">insert into tbl_user_quick_actions (user_ref_id, sort_order, quick_action_code) values (?,?,?);</stringProp>
          <stringProp name="queryArguments">${UserId},${SortOrder},${QwkActCode}</stringProp>
          <stringProp name="queryArgumentsTypes">VARCHAR,INTEGER,VARCHAR</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Prepared Update Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-1072578822">QwkActCode</stringProp>
              <stringProp name="1977193520">SortOrder</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-480760435">
                <stringProp name="1383194701">${__RandomString(50, abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890:)}</stringProp>
                <stringProp name="-362863940">${__Random(1,1000)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
            <stringProp name="TestPlan.comments">Random generated values to populate database</stringProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="tbl_user_quick_actions_history insert" enabled="true">
          <stringProp name="dataSource">conn_pool</stringProp>
          <stringProp name="query">insert into tbl_user_quick_actions_history (user_ref_id, quick_actions, created_date_time, created_by, updated_date_time, updated_by, version ) values (?,?,?,?,?,?,?);</stringProp>
          <stringProp name="queryArguments">${UserId},${QwkAct},${CreatedTime},${CreatedBy},${UpdatedTime},${UpdatedBy},${Version}</stringProp>
          <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,TIMESTAMP,VARCHAR,TIMESTAMP,VARCHAR,VARCHAR</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Prepared Update Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-1862853779">QwkAct</stringProp>
              <stringProp name="-1692627649">CreatedBy</stringProp>
              <stringProp name="54773330">UpdatedBy</stringProp>
              <stringProp name="1177958837">CreatedTime</stringProp>
              <stringProp name="1098086920">UpdatedTime</stringProp>
              <stringProp name="2016261304">Version</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-61937860">
                <stringProp name="291540939">${__RandomString(128, abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890:)}</stringProp>
                <stringProp name="-116605424">${__RandomString(50,abcdefghijklmnopqrstuvwxyz1234567890)}</stringProp>
                <stringProp name="-116605424">${__RandomString(50,abcdefghijklmnopqrstuvwxyz1234567890)}</stringProp>
                <stringProp name="-1728534736">${__time(yyyy-MM-dd hh:mm:ss)}</stringProp>
                <stringProp name="-1728534736">${__time(yyyy-MM-dd hh:mm:ss)}</stringProp>
                <stringProp name="1868267138">${__RandomString(6,1234567890)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
            <stringProp name="TestPlan.comments">Random generated values to populate database</stringProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="tbl_user_preference insert" enabled="true">
          <stringProp name="dataSource">conn_pool</stringProp>
          <stringProp name="query">insert into tbl_user_preference  (user_ref_id, scan_and_go_limit, is_login_email_notification_enabled, is_transaction_email_notification_enabled, is_application_setting_email_notification_enabled, is_masking_enabled, is_smart_transactions_enabled, language ) values (?,?,?,?,?,?,?,?);</stringProp>
          <stringProp name="queryArguments">${UserId},${ScanGoLimit},${isLoginEmailNoti},${isTxnEmailNoti},${isAppSettingEmailNoti},${isMaskEnabled},${isSmartTxnEnabled},${Language}</stringProp>
          <stringProp name="queryArgumentsTypes">VARCHAR,INTEGER,BOOLEAN,BOOLEAN,BOOLEAN,BOOLEAN,BOOLEAN,VARCHAR</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Prepared Update Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-52379050">ScanGoLimit</stringProp>
              <stringProp name="1924415507">isLoginEmailNoti</stringProp>
              <stringProp name="129149106">isTxnEmailNoti</stringProp>
              <stringProp name="504467449">isAppSettingEmailNoti</stringProp>
              <stringProp name="-1437837525">isMaskEnabled</stringProp>
              <stringProp name="1247654294">isSmartTxnEnabled</stringProp>
              <stringProp name="-1548945544">Language</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="981304369">
                <stringProp name="-1469095510">${__Random(10000, 100000)}</stringProp>
                <stringProp name="-732310053">${__Random(0,1)}</stringProp>
                <stringProp name="-732310053">${__Random(0,1)}</stringProp>
                <stringProp name="-732310053">${__Random(0,1)}</stringProp>
                <stringProp name="-732310053">${__Random(0,1)}</stringProp>
                <stringProp name="-732310053">${__Random(0,1)}</stringProp>
                <stringProp name="-675165323">${__RandomString(5,ABCDEFGHIJKLMNOPQRSTUVWXYZ)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
            <stringProp name="TestPlan.comments">Random generated values to populate database</stringProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="tbl_user_ekyc insert" enabled="true">
          <stringProp name="dataSource">conn_pool</stringProp>
          <stringProp name="query">insert into tbl_user_ekyc (user_ref_id, device_id, dopa_verify_flag, dopa_verify_date_time, biometric_verify_flag, biometric_verify_date_time, dipchip_verify_flag, id_card_expiry_date,is_cid_lifetime,dopa_verify_channel,dipchip_verify_date_time, dipchip_verify_channel, ep_last_updated_date_time, id_card_expiration_date_channel, biometric_verify_channel ) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);</stringProp>
          <stringProp name="queryArguments">${UserId},${DeviceId},${DopaVerifyFlag},${DopaVerifyTime},${BioVerifyFlag},${BioVerifyTime},${DipVerifyFlag},${CidExprDate},${isCidLifetime},${DopaVerifyChannel},${DipVerifyTime},${DipVerifyChannel},${EpLastUpdatedTime},${CidExprDateChannel},${BioVerifyChannel}</stringProp>
          <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,BOOLEAN,TIMESTAMP,BOOLEAN,TIMESTAMP,BOOLEAN,DATE,BOOLEAN,VARCHAR,TIMESTAMP,VARCHAR,TIMESTAMP,VARCHAR,VARCHAR</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Prepared Update Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="1800562817">DopaVerifyFlag</stringProp>
              <stringProp name="1800977378">DopaVerifyTime</stringProp>
              <stringProp name="-2056388658">DopaVerifyChannel</stringProp>
              <stringProp name="1845950093">BioVerifyFlag</stringProp>
              <stringProp name="1846364654">BioVerifyTime</stringProp>
              <stringProp name="1456219714">BioVerifyChannel</stringProp>
              <stringProp name="-537807280">DipVerifyFlag</stringProp>
              <stringProp name="-537392719">DipVerifyTime</stringProp>
              <stringProp name="-70407265">DipVerifyChannel</stringProp>
              <stringProp name="-1512568319">CidExprDate</stringProp>
              <stringProp name="1510864834">CidExprDateChannel</stringProp>
              <stringProp name="-1705244899">isCidLifetime</stringProp>
              <stringProp name="-1835717273">EpLastUpdatedTime</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-1756695391">
                <stringProp name="-732310053">${__Random(0,1)}</stringProp>
                <stringProp name="-1728534736">${__time(yyyy-MM-dd hh:mm:ss)}</stringProp>
                <stringProp name="-675165323">${__RandomString(5,ABCDEFGHIJKLMNOPQRSTUVWXYZ)}</stringProp>
                <stringProp name="-732310053">${__Random(0,1)}</stringProp>
                <stringProp name="-1728534736">${__time(yyyy-MM-dd hh:mm:ss)}</stringProp>
                <stringProp name="-675165323">${__RandomString(5,ABCDEFGHIJKLMNOPQRSTUVWXYZ)}</stringProp>
                <stringProp name="-732310053">${__Random(0,1)}</stringProp>
                <stringProp name="-1728534736">${__time(yyyy-MM-dd hh:mm:ss)}</stringProp>
                <stringProp name="-675165323">${__RandomString(5,ABCDEFGHIJKLMNOPQRSTUVWXYZ)}</stringProp>
                <stringProp name="1238737880">${__time(yyyy-MM-dd)}</stringProp>
                <stringProp name="-675165323">${__RandomString(5,ABCDEFGHIJKLMNOPQRSTUVWXYZ)}</stringProp>
                <stringProp name="-732310053">${__Random(0,1)}</stringProp>
                <stringProp name="-1728534736">${__time(yyyy-MM-dd hh:mm:ss)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
            <stringProp name="TestPlan.comments">Random generated values to populate database</stringProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="tbl_user_profile insert" enabled="true">
          <stringProp name="dataSource">conn_pool</stringProp>
          <stringProp name="query">insert into tbl_user_profile (user_ref_id, hashed_user_ref_id, email, segment, cif_no, cid, passport_no, passport_country, date_of_birth, full_name_th, full_name_en, first_name_th, first_name_en, last_name_th, last_name_en, middle_name_th, middle_name_en, nickname, profile_picture_file_name, otp_mobile_no, accepted_tnc_version, is_masked_account_no, is_block_by_staff, block_by_staff_reason, block_by_staff_branch_name, block_by_staff_employee_id, is_block_by_fraud, block_by_fraud_reason, block_by_fraud_employee_id, is_scan_and_go_allowed, is_push_notification_enabled, travel_card_visa_accepted_tnc_version, travel_card_upi_accepted_tnc_version, global_wallet_accepted_tnc_version, bypass_type, ndid_accepted_tnc_version, idp_accepted_tnc_version, is_ndid_enrolled, accepted_ekyc_consent_version, created_date_time, created_by, updated_date_time, updated_by, is_pin_active, mutual_fund_accepted_tnc_version, hvd_accepted_tnc_version, inw_accepted_tnc_version, remittance_accepted_tnc_version, virtual_debit_card_accepted_tnc_version, promptpay_accepted_tnc_version ) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);</stringProp>
          <stringProp name="queryArguments">${UserId},${UserIdHash},${Email},${Segment},${CifNo},${Cid},${PassportNo},${PassportCountry},${BirthDate},${FullNameTH},${FullNameEN},${FirstNameTH},${FirstNameEN},${LastNameTH},${LastNameEN},${MidNameTH},${MidNameEN},${Nickname},${ProfileName},${OtpMobileNo},${TncVersion},${isMaskedAcctNo},${isBlockedByStaff},${BlockedByStaffRes},${BlockedByStaffBranch},${BlockedByStaffEmpId},${isBlockedByFraud},${BlockedByFraudRes},${BlockedByFraudEmpId},${isScanGoAllowed},${isPushNotiEnabled},${TncCardVisaVersion},${TncCardUpiVersion},${TncGlobalWalletVersion},${BypassType},${TncNdidVersion},${TncIdpVersion},${isNdidEnrolled},${EkycVersion},${CreatedTime},${CreatedBy},${UpdatedTime},${UpdatedBy},${isPinActive},${TncMtfVersion},${TncHvdVersion},${TncInwVersion},${TncRemitVersion},${TncDebitVersion},${TncPromptpayVersion}</stringProp>
          <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,BOOLEAN,BOOLEAN,VARCHAR,VARCHAR,VARCHAR,BOOLEAN,VARCHAR,VARCHAR,BOOLEAN,BOOLEAN,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,BOOLEAN,VARCHAR,TIMESTAMP,VARCHAR,TIMESTAMP,VARCHAR,BOOLEAN,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Prepared Update Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-1011700588">UserIdHash</stringProp>
              <stringProp name="67066748">Email</stringProp>
              <stringProp name="-656591085">Segment</stringProp>
              <stringProp name="65104513">CifNo</stringProp>
              <stringProp name="67742">Cid</stringProp>
              <stringProp name="-1209682541">PassportNo</stringProp>
              <stringProp name="133939972">PassportCountry</stringProp>
              <stringProp name="793936109">BirthDate</stringProp>
              <stringProp name="1042256334">FullNameTH</stringProp>
              <stringProp name="1042255875">FullNameEN</stringProp>
              <stringProp name="473936111">FirstNameTH</stringProp>
              <stringProp name="473935652">FirstNameEN</stringProp>
              <stringProp name="-522608491">LastNameTH</stringProp>
              <stringProp name="-522608950">LastNameEN</stringProp>
              <stringProp name="1753475719">MidNameTH</stringProp>
              <stringProp name="1753475260">MidNameEN</stringProp>
              <stringProp name="135335054">Nickname</stringProp>
              <stringProp name="1845371828">ProfileName</stringProp>
              <stringProp name="1569610286">OtpMobileNo</stringProp>
              <stringProp name="1406467049">isMaskedAcctNo</stringProp>
              <stringProp name="1268146439">isBlockedByStaff</stringProp>
              <stringProp name="-2095284634">BlockedByStaffRes</stringProp>
              <stringProp name="324631903">BlockedByStaffBranch</stringProp>
              <stringProp name="-541082458">BlockedByStaffEmpId</stringProp>
              <stringProp name="1256081547">isBlockedByFraud</stringProp>
              <stringProp name="1163723754">BlockedByFraudRes</stringProp>
              <stringProp name="1703929762">BlockedByFraudEmpId</stringProp>
              <stringProp name="1485333657">isScanGoAllowed</stringProp>
              <stringProp name="357861479">isPushNotiEnabled</stringProp>
              <stringProp name="1472305250">BypassType</stringProp>
              <stringProp name="-358971776">isNdidEnrolled</stringProp>
              <stringProp name="-284484879">isPinActive</stringProp>
              <stringProp name="-185533336">EkycVersion</stringProp>
              <stringProp name="-2117935217">TncVersion</stringProp>
              <stringProp name="1537809374">TncCardVisaVersion</stringProp>
              <stringProp name="1162032227">TncCardUpiVersion</stringProp>
              <stringProp name="-1548518413">TncGlobalWalletVersion</stringProp>
              <stringProp name="962154878">TncNdidVersion</stringProp>
              <stringProp name="-1541257652">TncIdpVersion</stringProp>
              <stringProp name="-1430046174">TncMtfVersion</stringProp>
              <stringProp name="1041926347">TncHvdVersion</stringProp>
              <stringProp name="1173804655">TncInwVersion</stringProp>
              <stringProp name="1487224188">TncRemitVersion</stringProp>
              <stringProp name="1841714677">TncDebitVersion</stringProp>
              <stringProp name="-1752449379">TncPromptpayVersion</stringProp>
              <stringProp name="1177958837">CreatedTime</stringProp>
              <stringProp name="-1692627649">CreatedBy</stringProp>
              <stringProp name="1098086920">UpdatedTime</stringProp>
              <stringProp name="54773330">UpdatedBy</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="554523290">
                <stringProp name="192031182">${__RandomString(128)}</stringProp>
                <stringProp name="1692591765">${__RandomString(40,ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz@_-)}</stringProp>
                <stringProp name="-784353466">${__RandomString(16,abcdefghijklmnopqrstuvwxyz1234567890)}</stringProp>
                <stringProp name="-703230969">${__RandomString(12,0123456789)}</stringProp>
                <stringProp name="-1208789594">${__RandomString(13,0123456789)}</stringProp>
                <stringProp name="-819158992">${__RandomString(16,ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789)}</stringProp>
                <stringProp name="-709113704">${__RandomString(2,ABCDEFGHIJKLMNOPQRSTUVWXYZ)}</stringProp>
                <stringProp name="-641216942">${__RandomString(8,ABCDEFGHIJKLMNOPQRSTUVWXYZ)}</stringProp>
                <stringProp name="1757439774">${__RandomString(40,กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรลวศษสหฬอฮ)}</stringProp>
                <stringProp name="1061147041">${__RandomString(40,ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz)}</stringProp>
                <stringProp name="-991730603">${__RandomString(16,กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรลวศษสหฬอฮ)}</stringProp>
                <stringProp name="-708204584">${__RandomString(16,ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz)}</stringProp>
                <stringProp name="-991730603">${__RandomString(16,กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรลวศษสหฬอฮ)}</stringProp>
                <stringProp name="-708204584">${__RandomString(16,ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz)}</stringProp>
                <stringProp name="-991730603">${__RandomString(16,กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรลวศษสหฬอฮ)}</stringProp>
                <stringProp name="-708204584">${__RandomString(16,ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz)}</stringProp>
                <stringProp name="1061147041">${__RandomString(40,ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz)}</stringProp>
                <stringProp name="1061147041">${__RandomString(40,ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz)}</stringProp>
                <stringProp name="307886281">${__RandomString(10,0123456789)}</stringProp>
                <stringProp name="-732310053">${__Random(0,1)}</stringProp>
                <stringProp name="-732310053">${__Random(0,1)}</stringProp>
                <stringProp name="-708204584">${__RandomString(16,ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz)}</stringProp>
                <stringProp name="1061147041">${__RandomString(40,ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz)}</stringProp>
                <stringProp name="307886281">${__RandomString(10,0123456789)}</stringProp>
                <stringProp name="-732310053">${__Random(0,1)}</stringProp>
                <stringProp name="-708204584">${__RandomString(16,ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz)}</stringProp>
                <stringProp name="307886281">${__RandomString(10,0123456789)}</stringProp>
                <stringProp name="-732310053">${__Random(0,1)}</stringProp>
                <stringProp name="-732310053">${__Random(0,1)}</stringProp>
                <stringProp name="1283686443">${__RandomString(16,ABCDEFGHIJKLMNOPQRSTUVWXYZ)}</stringProp>
                <stringProp name="-732310053">${__Random(0,1)}</stringProp>
                <stringProp name="-732310053">${__Random(0,1)}</stringProp>
                <stringProp name="-675165323">${__RandomString(5,ABCDEFGHIJKLMNOPQRSTUVWXYZ)}</stringProp>
                <stringProp name="-675165323">${__RandomString(5,ABCDEFGHIJKLMNOPQRSTUVWXYZ)}</stringProp>
                <stringProp name="-675165323">${__RandomString(5,ABCDEFGHIJKLMNOPQRSTUVWXYZ)}</stringProp>
                <stringProp name="-675165323">${__RandomString(5,ABCDEFGHIJKLMNOPQRSTUVWXYZ)}</stringProp>
                <stringProp name="-675165323">${__RandomString(5,ABCDEFGHIJKLMNOPQRSTUVWXYZ)}</stringProp>
                <stringProp name="-675165323">${__RandomString(5,ABCDEFGHIJKLMNOPQRSTUVWXYZ)}</stringProp>
                <stringProp name="-675165323">${__RandomString(5,ABCDEFGHIJKLMNOPQRSTUVWXYZ)}</stringProp>
                <stringProp name="-675165323">${__RandomString(5,ABCDEFGHIJKLMNOPQRSTUVWXYZ)}</stringProp>
                <stringProp name="-675165323">${__RandomString(5,ABCDEFGHIJKLMNOPQRSTUVWXYZ)}</stringProp>
                <stringProp name="-675165323">${__RandomString(5,ABCDEFGHIJKLMNOPQRSTUVWXYZ)}</stringProp>
                <stringProp name="-675165323">${__RandomString(5,ABCDEFGHIJKLMNOPQRSTUVWXYZ)}</stringProp>
                <stringProp name="-675165323">${__RandomString(5,ABCDEFGHIJKLMNOPQRSTUVWXYZ)}</stringProp>
                <stringProp name="-675165323">${__RandomString(5,ABCDEFGHIJKLMNOPQRSTUVWXYZ)}</stringProp>
                <stringProp name="-1728534736">${__time(yyyy-MM-dd hh:mm:ss)}</stringProp>
                <stringProp name="-116605424">${__RandomString(50,abcdefghijklmnopqrstuvwxyz1234567890)}</stringProp>
                <stringProp name="-1728534736">${__time(yyyy-MM-dd hh:mm:ss)}</stringProp>
                <stringProp name="-116605424">${__RandomString(50,abcdefghijklmnopqrstuvwxyz1234567890)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
            <stringProp name="TestPlan.comments">Random generated values to populate database</stringProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">true</boolProp>
        </DebugSampler>
        <hashTree/>
        <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="Backend Listener" enabled="true">
          <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="influxdbMetricsSender" elementType="Argument">
                <stringProp name="Argument.name">influxdbMetricsSender</stringProp>
                <stringProp name="Argument.value">org.apache.jmeter.visualizers.backend.influxdb.HttpMetricsSender</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="influxdbUrl" elementType="Argument">
                <stringProp name="Argument.name">influxdbUrl</stringProp>
                <stringProp name="Argument.value">http://jmeter-influxdb:8086/write?db=jmeter</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="application" elementType="Argument">
                <stringProp name="Argument.name">application</stringProp>
                <stringProp name="Argument.value">application name</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="measurement" elementType="Argument">
                <stringProp name="Argument.name">measurement</stringProp>
                <stringProp name="Argument.value">jmeter</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="summaryOnly" elementType="Argument">
                <stringProp name="Argument.name">summaryOnly</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="samplersRegex" elementType="Argument">
                <stringProp name="Argument.name">samplersRegex</stringProp>
                <stringProp name="Argument.value">.*</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="percentiles" elementType="Argument">
                <stringProp name="Argument.name">percentiles</stringProp>
                <stringProp name="Argument.value">99;95;90</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="testTitle" elementType="Argument">
                <stringProp name="Argument.name">testTitle</stringProp>
                <stringProp name="Argument.value">Test name</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="eventTags" elementType="Argument">
                <stringProp name="Argument.name">eventTags</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="classname">org.apache.jmeter.visualizers.backend.influxdb.InfluxdbBackendListenerClient</stringProp>
        </BackendListener>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Create Sampled CSV Data" enabled="true">
        <stringProp name="TestPlan.comments">Fetches sampled data from Spanner for the load test</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Fetch UserIds" enabled="true">
          <stringProp name="TestPlan.comments">Create CSV for sample UserIds to be used for perf test.</stringProp>
          <stringProp name="dataSource">conn_pool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT user_ref_id FROM tbl_device_profile TABLESAMPLE BERNOULLI (50 PERCENT) limit 50000;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="JDBC PreProcessor" enabled="true">
            <stringProp name="dataSource">conn_pool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT user_ref_id FROM tbl_device_profile TABLESAMPLE BERNOULLI (50 PERCENT) limit 50000;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable">resultSet</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCPreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">resultSet = vars.getObject(&quot;resultSet&quot;);
StringBuilder result = new StringBuilder();

for (Object row : resultSet ) {
    iter = row.entrySet().iterator();
    while (iter.hasNext()) {
        pair = iter.next();
        result.append(pair.getValue());
    }
    result.append(System.getProperty(&quot;line.separator&quot;));
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(&quot;/userId.csv&quot;), result.toString(), &quot;UTF-8&quot;);</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
