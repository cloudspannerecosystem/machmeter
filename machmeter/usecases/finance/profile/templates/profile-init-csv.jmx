<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Spanner Load Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="project" elementType="Argument">
            <stringProp name="Argument.name">project</stringProp>
            <stringProp name="Argument.value">${__P(project, span-cloud-testing)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="instance" elementType="Argument">
            <stringProp name="Argument.name">instance</stringProp>
            <stringProp name="Argument.value">${__P(instance, default)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="database" elementType="Argument">
            <stringProp name="Argument.name">database</stringProp>
            <stringProp name="Argument.value">${__P(database, default)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="threads" elementType="Argument">
            <stringProp name="Argument.name">threads</stringProp>
            <stringProp name="Argument.value">${__P(threads,50)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="rampUp_Time" elementType="Argument">
            <stringProp name="Argument.name">rampUp_Time</stringProp>
            <stringProp name="Argument.value">${__P(rampUp_Time,5)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="startUp_Delay" elementType="Argument">
            <stringProp name="Argument.name">startUp_Delay</stringProp>
            <stringProp name="Argument.value">${__P(startUp_Delay,5)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="duration" elementType="Argument">
            <stringProp name="Argument.name">duration</stringProp>
            <stringProp name="Argument.value">${__P(duration,1800)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="iterations" elementType="Argument">
            <stringProp name="Argument.name">iterations</stringProp>
            <stringProp name="Argument.value">${__P(iterations,10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="channels" elementType="Argument">
            <stringProp name="Argument.name">channels</stringProp>
            <stringProp name="Argument.value">${__P(grpc_channel,50)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="connections" elementType="Argument">
            <stringProp name="Argument.name">connections</stringProp>
            <stringProp name="Argument.value">${__P(connections, 1000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath">/test/</stringProp>
    </TestPlan>
    <hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="create spanner connection" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Create connection" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.google.cloud.spanner.*;

String projectId = &quot;${project}&quot;;
String instanceId = &quot;${instance}&quot;;
String databaseId = &quot;${database}&quot;;

int sessions = ${connections};
int channels = ${channels};
SessionPoolOptions sessionPool = SessionPoolOptions.newBuilder()
                .setMinSessions(sessions)
                .setMaxSessions(sessions)
                .build();

SpannerOptions options = SpannerOptions.newBuilder()
      .setNumChannels(channels)
      .setSessionPoolOption(sessionPool)
      .build();

Spanner spanner = options.getService();
DatabaseClient dbClient = spanner.getDatabaseClient(DatabaseId.of(projectId, instanceId, databaseId));

props.put(&quot;spanner&quot;, spanner);
props.put(&quot;dbClient&quot;, dbClient);
props.put(&quot;maxSamplingSize&quot;, 1000);

SampleResult.setRequestHeaders(spanner.toString());</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="create sampled csv data" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Sampling UserID" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.google.cloud.spanner.*;


DatabaseClient dbClient = props.get(&quot;dbClient&quot;);

// Create a list of sampling user_ref_id before testing
// Note: Please change limit to 10000
String readUserIdSql=&quot;SELECT user_ref_id FROM tbl_user_profile TABLESAMPLE BERNOULLI (50 PERCENT) limit 10000;&quot;;
Statement stmt = Statement.newBuilder(readUserIdSql).build();

ResultSet result = dbClient
	.singleUseReadOnlyTransaction()
	.executeQuery(stmt);


StringBuilder csv_result = new StringBuilder();
int count = 0;

// Store sampling user_ref_id in the JmeterProperties for future use by other threads*
while (result.next()) {
	count = count+1;
	//log.info(&quot;count({}), thread({}):{}&quot;,count, ${__threadNum},result.getString(&quot;user_ref_id&quot;));
	//vars.put(&quot;UserId_&quot; + count.toString(),result.getString(&quot;user_ref_id&quot;) )
	csv_result.append(result.getString(&quot;user_ref_id&quot;));
	csv_result.append(System.getProperty(&quot;line.separator&quot;));

}
org.apache.commons.io.FileUtils.writeStringToFile(new File(&quot;/userId.csv&quot;), csv_result.toString(), &quot;UTF-8&quot;);
result.close();</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Sampling SegmentID" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.google.cloud.spanner.*;


DatabaseClient dbClient = props.get(&quot;dbClient&quot;);

// Create a list of sampling user_ref_id before testing
// Note: Please change limit to 10000
String readUserIdSql=&quot;SELECT segment FROM tbl_transaction_limit TABLESAMPLE BERNOULLI (50 PERCENT) limit 10000;&quot;;
Statement stmt = Statement.newBuilder(readUserIdSql).build();

ResultSet result = dbClient
	.singleUseReadOnlyTransaction()
	.executeQuery(stmt);


StringBuilder csv_result = new StringBuilder();
int count = 0;

// Store sampling user_ref_id in the JmeterProperties for future use by other threads*
while (result.next()) {
	count = count+1;
	//log.info(&quot;count({}), thread({}):{}&quot;,count, ${__threadNum},result.getString(&quot;segment&quot;));
	//vars.put(&quot;UserId_&quot; + count.toString(),result.getString(&quot;segment&quot;) )
	csv_result.append(result.getString(&quot;segment&quot;));
	csv_result.append(System.getProperty(&quot;line.separator&quot;));

}
org.apache.commons.io.FileUtils.writeStringToFile(new File(&quot;segmentId.csv&quot;), csv_result.toString(), &quot;UTF-8&quot;);
result.close();
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Sampling DeviceID" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.google.cloud.spanner.*;


DatabaseClient dbClient = props.get(&quot;dbClient&quot;);

// Create a list of sampling user_ref_id before testing
// Note: Please change limit to 10000
String readUserIdSql=&quot;SELECT device_id FROM tbl_device_profile TABLESAMPLE BERNOULLI (50 PERCENT) limit 10000;&quot;;
Statement stmt = Statement.newBuilder(readUserIdSql).build();

ResultSet result = dbClient
	.singleUseReadOnlyTransaction()
	.executeQuery(stmt);

StringBuilder csv_result = new StringBuilder();
int count = 0;

// Store sampling user_ref_id in the JmeterProperties for future use by other threads*
while (result.next()) {
	count = count+1;
	//log.info(&quot;count({}), thread({}):{}&quot;,count, ${__threadNum},result.getString(&quot;device_id&quot;));
	//vars.put(&quot;DeviceId_&quot; + count.toString(),result.getString(&quot;device_id&quot;) )
	csv_result.append(result.getString(&quot;device_id&quot;));
	csv_result.append(System.getProperty(&quot;line.separator&quot;));

}
org.apache.commons.io.FileUtils.writeStringToFile(new File(&quot;deviceId.csv&quot;), csv_result.toString(), &quot;UTF-8&quot;);
result.close();</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="read sampled csv data" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">/userId.csv</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">userId</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">/segmentId.csv</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">segmentId</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">/deviceId.csv</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">deviceId</stringProp>
        </CSVDataSet>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug #5" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="testing  userId from sampling variable" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${threads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramUp_Time}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">${startUp_Delay}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Covert props to vars" enabled="false">
          <stringProp name="scriptLanguage">java</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">// Convert user_ref_id stored in JmeterProperites as UserID_&lt;count&gt;  to JmeterVariables for using within threadgroup
// Note:

Enumeration e = props.propertyNames();
while (e.hasMoreElements()) {
  String propertyName = e.nextElement().toString();
  System.out.println(propertyName);
  if (propertyName.startsWith(&quot;UserId_&quot;)) {
      vars.put(propertyName, props.getProperty(propertyName));
  };
  if (propertyName.startsWith(&quot;DeviceId_&quot;)) {
      vars.put(propertyName, props.getProperty(propertyName));
  };
  if (propertyName.startsWith(&quot;SegmentId_&quot;)) {
      vars.put(propertyName, props.getProperty(propertyName));
  }
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="TPC - Random Read tbl_user_profile" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">false</boolProp>
          <intProp name="ThroughputController.maxThroughput">1</intProp>
          <FloatProperty>
            <name>ThroughputController.percentThroughput</name>
            <value>100.0</value>
            <savedValue>0.0</savedValue>
          </FloatProperty>
        </ThroughputController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Read tbl_user_profile" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import com.google.cloud.spanner.*;


DatabaseClient dbClient = props.get(&quot;dbClient&quot;);


// Randomly generate integer within a RANGE of user_ref_id stored in JmeterVariables as  UserID_&lt;count&gt;
// Note: Please change high variable to match the sampling size in JSR223 method --&gt; Sampling tbl_user_profile

Random randomNum = new Random();
int low = 1;
int high = props.get(&quot;maxSamplingSize&quot;); //Change here to suit for sampling size
int number = randomNum.nextInt(high - low) + low;


//String userId = vars.get(&quot;UserId_&quot; + number.toString());
String userId = vars.get(&quot;userId&quot;);
String readProfileSql = &quot;SELECT * FROM tbl_user_profile WHERE user_ref_id = @userId&quot;;

log.info(&quot;user({}):{}&quot;, number.toString(), userId);

Statement stmt = Statement.newBuilder(readProfileSql)
 .bind(&quot;userId&quot;).to(userId)
 .build();

ResultSet result = dbClient
 .singleUseReadOnlyTransaction()
 .executeQuery(stmt);

// Note: this can be removed

String responseHeader = &quot;&quot;;
while (result.next()) {
	//log.info(&quot;read --&gt;thread({}): user({}),{}:{}&quot;,${__threadNum},number, userId,result.getString(&quot;otp_mobile_no&quot;));

}

result.close();
</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="TPC - Random Read" enabled="false">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">false</boolProp>
          <intProp name="ThroughputController.maxThroughput">1</intProp>
          <FloatProperty>
            <name>ThroughputController.percentThroughput</name>
            <value>90.0</value>
            <savedValue>0.0</savedValue>
          </FloatProperty>
        </ThroughputController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Random Read UserId from tbl_user_profile" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import com.google.cloud.spanner.*;


DatabaseClient dbClient = props.get(&quot;dbClient&quot;);

String readUserProfileSql = &quot;SELECT user_ref_id FROM tbl_user_profile TABLESAMPLE BERNOULLI (50 PERCENT) limit 1&quot;;

Statement stmt = Statement.newBuilder(readUserProfileSql)
      .build();

ResultSet result = dbClient
	.singleUseReadOnlyTransaction()
	.executeQuery(stmt);

String responseHeader = &quot;&quot;;

while (result.next()) {
	//responseHeader += &quot; OTP Mobile: &quot; +result.getString(&quot;otp_mobile_no&quot;);
	log.info(&quot;Random thread({}):{}&quot;,${__threadNum},result.getString(&quot;user_ref_id&quot;));
	vars.put(&quot;current_userID&quot;,result.getString(&quot;user_ref_id&quot;) )

}
result.close();

SampleResult.setRequestHeaders(responseHeader);</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug #4" enabled="true">
            <boolProp name="displayJMeterProperties">true</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Read tbl_user_profile" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import com.google.cloud.spanner.*;


DatabaseClient dbClient = props.get(&quot;dbClient&quot;);

String userId = vars.get(&quot;current_userID&quot;);
//log.info(userId);

String readUserProfileSql = &quot;Select * from tbl_user_profile where user_ref_id = @userId&quot;;
Statement stmt = Statement.newBuilder(readUserProfileSql)
      .bind(&quot;userId&quot;).to(userId)
      .build();

ResultSet result = dbClient
	.singleUseReadOnlyTransaction()
	.executeQuery(stmt);

String responseHeader = &quot;&quot;;
while (result.next()) {
	//responseHeader += &quot; OTP Mobile: &quot; +result.getString(&quot;otp_mobile_no&quot;);
	log.info(&quot;Read thread({}):{}:{}&quot;,${__threadNum},userId,result.getString(&quot;otp_mobile_no&quot;));

}
result.close();

SampleResult.setRequestHeaders(responseHeader);</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="false">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">false</boolProp>
          <intProp name="ThroughputController.maxThroughput">1</intProp>
          <FloatProperty>
            <name>ThroughputController.percentThroughput</name>
            <value>100.0</value>
            <savedValue>0.0</savedValue>
          </FloatProperty>
        </ThroughputController>
        <hashTree>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller" enabled="true">
            <stringProp name="ForeachController.inputVal">userId</stringProp>
            <stringProp name="ForeachController.returnVal">CURRENT_USERID</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end"></stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">index</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Read tbl_user_profile" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import com.google.cloud.spanner.*;


DatabaseClient dbClient = props.get(&quot;dbClient&quot;);

String userId = vars.get(&quot;CURRENT_USERID&quot;);
//log.info(userId);

String readUserProfileSql = &quot;Select otp_mobile_no from tbl_user_profile where user_ref_id = @userId&quot;;
Statement stmt = Statement.newBuilder(readUserProfileSql)
      .bind(&quot;userId&quot;).to(userId)
      .build();

ResultSet result = dbClient
	.singleUseReadOnlyTransaction()
	.executeQuery(stmt);

String responseHeader = &quot;&quot;;
while (result.next()) {
	responseHeader += &quot; OTP Mobile: &quot; +result.getString(&quot;otp_mobile_no&quot;);
	//log.info(&quot;thread({}):{}:{}&quot;,${__threadNum},vars.get(&quot;CURRENT_USERID&quot;),result.getString(&quot;otp_mobile_no&quot;));

}
result.close();

SampleResult.setRequestHeaders(responseHeader);</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="false">
              <stringProp name="dataSource">conn</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select otp_mobile_no from tbl_user_profile where user_ref_id = @USERID ;</stringProp>
              <stringProp name="queryArguments">${@USERID}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">OtpMobile</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="-817039770">@USERID</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="-501221224">
                    <stringProp name="-34080646">${CURRENT_USERID}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
            </hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223  ${CURRENT_USERID}" enabled="false">
              <stringProp name="scriptLanguage">java</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">
//log.info(vars.get(&quot;OtpMobile&quot;));
log.info(&quot;thread({}):{}&quot;,${__threadNum},vars.get(&quot;CURRENT_USERID&quot;));


</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug #5" enabled="false">
              <boolProp name="displayJMeterProperties">true</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="TPC - Random Insert" enabled="false">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">false</boolProp>
          <intProp name="ThroughputController.maxThroughput">1</intProp>
          <FloatProperty>
            <name>ThroughputController.percentThroughput</name>
            <value>10.0</value>
            <savedValue>0.0</savedValue>
          </FloatProperty>
        </ThroughputController>
        <hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug #5" enabled="true">
            <boolProp name="displayJMeterProperties">true</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Insert tbl_user_profile" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import com.google.cloud.spanner.*;
import java.util.*;
import com.google.cloud.Timestamp;
import org.apache.commons.lang3.RandomStringUtils;
import java.lang.Long

DatabaseClient dbClient    = props.get(&quot;dbClient&quot;);
String vuser_ref_id 	  		= RandomStringUtils.randomAlphabetic(41);
String vhashed_user_ref_id 		= RandomStringUtils.random(128);
String vemail 			  		= RandomStringUtils.randomAlphabetic(40);
String vsegment 		  		= RandomStringUtils.randomAlphabetic(16);
String vcif_no 		  		= RandomStringUtils.randomAlphabetic(12);
String vcid			  		= RandomStringUtils.randomAlphabetic(13);;
String vpassport_no 	  		= RandomStringUtils.randomAlphabetic(16);
String vpassport_country   		= RandomStringUtils.randomAlphabetic(2);
String vdate_of_birth 	  		= RandomStringUtils.randomAlphabetic(8);
String vfull_name_th 	  		= RandomStringUtils.randomAlphabetic(16);
String vfull_name_en 	  		= RandomStringUtils.randomAlphabetic(16);
String vfirst_name_th	  		= RandomStringUtils.randomAlphabetic(16);
String vfirst_name_en 	  		= RandomStringUtils.randomAlphabetic(16);
String vlast_name_th 	  		= RandomStringUtils.randomAlphabetic(16);
String vlast_name_en 	  		= RandomStringUtils.randomAlphabetic(16);
String vmiddle_name_th 	  		= RandomStringUtils.randomAlphabetic(16);
String vmiddle_name_en 	  		= RandomStringUtils.randomAlphabetic(16);
String vnickname 		 		= RandomStringUtils.randomAlphabetic(16);
String vprofile_picture_file_name 	= RandomStringUtils.randomAlphabetic(40);
String votp_mobile_no 	  		= RandomStringUtils.randomNumeric(10);
String vaccepted_tnc_version 		= RandomStringUtils.randomAlphabetic(6);
boolean vis_masked_account_no 	= true;
boolean vis_block_by_staff 		= true;
String vblock_by_staff_reason 	= RandomStringUtils.randomAlphabetic(16);
String vblock_by_staff_branch_name = RandomStringUtils.randomAlphabetic(40);
String vblock_by_staff_employee_id = RandomStringUtils.randomNumeric(10);
boolean vis_block_by_fraud 		= true;
String vblock_by_fraud_reason 	= RandomStringUtils.randomAlphabetic(16);
String vblock_by_fraud_employee_id = RandomStringUtils.randomNumeric(10);
boolean vis_scan_and_go_allowed 	= true;
boolean vis_push_notification_enabled = true;
String vtravel_card_visa_accepted_tnc_version 	= RandomStringUtils.randomAlphabetic(6);
String vtravel_card_upi_accepted_tnc_version 	= RandomStringUtils.randomAlphabetic(6);
String vglobal_wallet_accepted_tnc_version 		= RandomStringUtils.randomAlphabetic(6);
String vbypass_type 			= RandomStringUtils.randomAlphabetic(16);
String vndid_accepted_tnc_version 	= RandomStringUtils.randomAlphabetic(6);
String vidp_accepted_tnc_version 	= RandomStringUtils.randomAlphabetic(6);
boolean vis_ndid_enrolled	     = true;
String vaccepted_ekyc_consent_version 			= RandomStringUtils.randomAlphabetic(6);
Timestamp vcreated_date_time 		= Timestamp.ofTimeMicroseconds(System.currentTimeMillis());
String vcreated_by 				= &quot;INSERT Perf&quot;;
Timestamp vupdated_date_time 		= Timestamp.ofTimeMicroseconds(System.currentTimeMillis());
String vupdated_by 				= &quot;INSERT Perf&quot;;
boolean vis_pin_active 			= true;
String vmutual_fund_accepted_tnc_version 		= RandomStringUtils.randomAlphabetic(6);
String vhvd_accepted_tnc_version	= RandomStringUtils.randomAlphabetic(6);
String vinw_accepted_tnc_version 	= RandomStringUtils.randomAlphabetic(6);
String vremittance_accepted_tnc_version 		= RandomStringUtils.randomAlphabetic(6);
String vvirtual_debit_card_accepted_tnc_version 	= RandomStringUtils.randomAlphabetic(6);
String vpromptpay_accepted_tnc_version 			= RandomStringUtils.randomAlphabetic(6);


Mutation mutation = Mutation.newInsertBuilder(&quot;tbl_user_profile&quot;)
					.set(&quot;user_ref_id&quot;)
					.to(vuser_ref_id)
					.set(&quot;hashed_user_ref_id&quot;)
					.to(vhashed_user_ref_id)
					.set(&quot;email&quot;)
					.to(vemail)
					.set(&quot;segment&quot;)
					.to(vsegment)
					.set(&quot;cif_no&quot;)
					.to(vcif_no)
					.set(&quot;cid&quot;)
					.to(vcid)
					.set(&quot;passport_no&quot;)
					.to(vpassport_no)
					.set(&quot;passport_country&quot;)
					.to(vpassport_country)
					.set(&quot;date_of_birth&quot;)
					.to(vdate_of_birth)
					.set(&quot;full_name_th&quot;)
					.to(vfull_name_th)
					.set(&quot;full_name_en&quot;)
					.to(vfull_name_en)
					.set(&quot;first_name_th&quot;)
					.to(vfirst_name_th)
					.set(&quot;first_name_en&quot;)
					.to(vfirst_name_en)
					.set(&quot;last_name_th&quot;)
					.to(vlast_name_th)
					.set(&quot;last_name_en&quot;)
					.to(vlast_name_en)
					.set(&quot;middle_name_th&quot;)
					.to(vmiddle_name_th)
					.set(&quot;middle_name_en&quot;)
					.to(vmiddle_name_en)
					.set(&quot;nickname&quot;)
					.to(vnickname)
					.set(&quot;profile_picture_file_name&quot;)
					.to(vprofile_picture_file_name)
					.set(&quot;otp_mobile_no&quot;)
					.to(votp_mobile_no)
					.set(&quot;accepted_tnc_version&quot;)
					.to(vaccepted_tnc_version)
					.set(&quot;is_masked_account_no&quot;)
					.to(vis_masked_account_no)
					.set(&quot;is_block_by_staff&quot;)
					.to(vis_block_by_staff)
					.set(&quot;block_by_staff_reason&quot;)
					.to(vblock_by_staff_reason)
					.set(&quot;block_by_staff_branch_name&quot;)
					.to(vblock_by_staff_branch_name)
					.set(&quot;block_by_staff_employee_id&quot;)
					.to(vblock_by_staff_employee_id)
					.set(&quot;is_block_by_fraud&quot;)
					.to(vis_block_by_fraud)
					.set(&quot;block_by_fraud_reason&quot;)
					.to(vblock_by_fraud_reason)
					.set(&quot;block_by_fraud_employee_id&quot;)
					.to(vblock_by_fraud_employee_id)
					.set(&quot;is_scan_and_go_allowed&quot;)
					.to(vis_scan_and_go_allowed)
					.set(&quot;is_push_notification_enabled&quot;)
					.to(vis_push_notification_enabled)
					.set(&quot;travel_card_visa_accepted_tnc_version&quot;)
					.to(vtravel_card_visa_accepted_tnc_version)
					.set(&quot;travel_card_upi_accepted_tnc_version&quot;)
					.to(vtravel_card_upi_accepted_tnc_version)
					.set(&quot;global_wallet_accepted_tnc_version&quot;)
					.to(vglobal_wallet_accepted_tnc_version)
					.set(&quot;bypass_type&quot;)
					.to(vbypass_type)
					.set(&quot;ndid_accepted_tnc_version&quot;)
					.to(vndid_accepted_tnc_version)
					.set(&quot;idp_accepted_tnc_version&quot;)
					.to(vidp_accepted_tnc_version)
					.set(&quot;is_ndid_enrolled&quot;)
					.to(vis_ndid_enrolled)
					.set(&quot;accepted_ekyc_consent_version&quot;)
					.to(vaccepted_ekyc_consent_version)
					.set(&quot;created_date_time&quot;)
					.to(vcreated_date_time)
					.set(&quot;created_by&quot;)
					.to(vcreated_by)
					.set(&quot;updated_date_time&quot;)
					.to(vupdated_date_time)
					.set(&quot;updated_by&quot;)
					.to(vupdated_by)
					.set(&quot;is_pin_active&quot;)
					.to(vis_pin_active)
					.set(&quot;mutual_fund_accepted_tnc_version&quot;)
					.to(vmutual_fund_accepted_tnc_version)
					.set(&quot;hvd_accepted_tnc_version&quot;)
					.to(vhvd_accepted_tnc_version)
					.set(&quot;inw_accepted_tnc_version&quot;)
					.to(vinw_accepted_tnc_version)
					.set(&quot;remittance_accepted_tnc_version&quot;)
					.to(vremittance_accepted_tnc_version)
					.set(&quot;virtual_debit_card_accepted_tnc_version&quot;)
					.to(vvirtual_debit_card_accepted_tnc_version)
					.set(&quot;promptpay_accepted_tnc_version&quot;)
					.to(vpromptpay_accepted_tnc_version)
					.build();

ArrayList&lt;Mutation&gt; mutations = new ArrayList&lt;&gt;();
mutations.add(mutation);
dbClient.write(mutations);

log.info(&quot;Insert thread({}):{}&quot;,${__threadNum},vuser_ref_id);


SampleResult.setRequestHeaders(mutation.toString());
</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="tearDown Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">1</stringProp>
        <stringProp name="ThreadGroup.delay">1</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </PostThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Release connection" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">props.get(&quot;spanner&quot;).close();
props.get(&quot;conn&quot;).close();</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Clear All Properties" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">props.get(&quot;spanner&quot;).close();
props.clear()</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
