<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Scenario 1 Cloud Spanner Initial Load" enabled="true">
      <stringProp name="TestPlan.comments">Populates the user_bal and user_txn table with dummy data</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="project" elementType="Argument">
            <stringProp name="Argument.name">project</stringProp>
            <stringProp name="Argument.value">${__P(project, default)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="instance" elementType="Argument">
            <stringProp name="Argument.name">instance</stringProp>
            <stringProp name="Argument.value">${__P(instance, default)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="database" elementType="Argument">
            <stringProp name="Argument.name">database</stringProp>
            <stringProp name="Argument.value">${__P(database, default)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="connections" elementType="Argument">
            <stringProp name="Argument.name">connections</stringProp>
            <stringProp name="Argument.value">${__P(connections, 1000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="channels" elementType="Argument">
            <stringProp name="Argument.name">channels</stringProp>
            <stringProp name="Argument.value">${__P(channels, 10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="users" elementType="Argument">
            <stringProp name="Argument.name">users</stringProp>
            <stringProp name="Argument.value">${__P(users, 10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="iterations" elementType="Argument">
            <stringProp name="Argument.name">iterations</stringProp>
            <stringProp name="Argument.value">${__P(iterations, 5)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath">/test/</stringProp>
    </TestPlan>
    <hashTree>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection" enabled="false">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery"></stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="connectionProperties"></stringProp>
        <stringProp name="dataSource">conn_pool</stringProp>
        <stringProp name="dbUrl">jdbc:cloudspanner:/projects/${project}/instances/${instance}/databases/${database}?minSessions=${connections};maxSessions=${connections};numChannels=${channels}</stringProp>
        <stringProp name="driver">com.google.cloud.spanner.jdbc.JdbcDriver</stringProp>
        <stringProp name="initQuery"></stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password"></stringProp>
        <stringProp name="poolMax">${connections}</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="create spanner connection" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Create connection" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.google.cloud.spanner.*;

String projectId = &quot;${project}&quot;;
String instanceId = &quot;${instance}&quot;;
String databaseId = &quot;${database}&quot;;

int sessions = ${connections};
int channels = ${channels}; 
SessionPoolOptions sessionPool = SessionPoolOptions.newBuilder()
                .setMinSessions(sessions)
                .setMaxSessions(sessions)
                .build();
                
SpannerOptions options = SpannerOptions.newBuilder()
      .setNumChannels(channels)
      .setSessionPoolOption(sessionPool)
      .build();
    
Spanner spanner = options.getService();
DatabaseClient dbClient = spanner.getDatabaseClient(DatabaseId.of(projectId, instanceId, databaseId));

props.put(&quot;spanner&quot;, spanner);
props.put(&quot;dbClient&quot;, dbClient);
props.put(&quot;maxSamplingSize&quot;, 1000);

SampleResult.setRequestHeaders(spanner.toString());</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="load sample data using Spanner Connection" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${iterations}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${ramUp_Time}</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">${duration}</stringProp>
        <stringProp name="ThreadGroup.delay">${startUp_Delay}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Insert user_data" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.google.cloud.spanner.*;
import java.util.*;
import com.google.cloud.Timestamp;
import org.apache.commons.lang3.RandomStringUtils;
import java.lang.Long

try 
{ 
	DatabaseClient dbClient    = props.get(&quot;dbClient&quot;);
	
	Timestamp createdDate 		= Timestamp.ofTimeMicroseconds(System.currentTimeMillis());
	
	String data 		 	= &quot;fbsdkjbfksdjfbksdfsvddjfgbdcfdsfbjsdkfbskdfbksdfbksdfbjksdbfksdbfksdbfksdfbdskbfksjfgbdjkfhbgdfkgsfsdbfskdfbsksdfhjksdfhksjdfjskdfbjksdbfskdbgfssdfsdkfbsdkjbfksdjfsdfsdkfbsdkjbfksdjfbksdfsvdsdfhjksdfhksjdfjskdfbjksdbfskdbgfssdfsdkfbsdkjbfksdjfbksdfsvdsdfhjksdfhksjdfjskdfbjksdbfskdbgfssdfsdkfbsdkjbfksdjfbksdfsvdsdfhjksdfhksjdfjskdfbjksdbfskdbgfssdfsdkfbsdkjbfksdjfbksdfsvdsdfhjksdfhksjdfjskdfbjksdbfskdbgfssdfsdkfbsdkjbfksdjfbksdfsvdsdfhjksdfhksjdfjskdfbjksdbfskdbgfssdfsdkfbsdkjbfksdjfbksdfsvdsdfhjksdfhksjdfjskdfbjksdbfskdbgfssdfsdkfbsdkjbfksdjfbksdfsvdsdfhjksdfhksjdfjskdfbjksdbfskdbgfssdfsdkfbsdkjbfksdjfbksdfsvddjfgbdcfdsfbjsdkfbskdfbksdfbksdfbjksdbfksdbfksdbfksdfbdskbfksjfgbdjkfhbgdfkgsfsdbfskdfbsksdfhjksdfhksjdfjskdfbjksdbfskdbgfssdfsdkfbsdkjbfksdjfbksdfsvdsfskjhhjvgvhsdfasaewrerergergergergertertevcxvxcvsdsdfgdfgdfgdfgdfgdgfdgnnnnndsvcfjsdfvjsdvfksdavfvfdsjhbdjhfgbjhdfbgdhjfgjdhfgbjdhfbgjhdfbgvnvnvbnvnvbnvnbvnbjhfjfhjfjfjfjfjfhjdfbgsdfhjksdfhksjdfjskdfbjksdbfskdbgfssdfsdkfbsdkjbfksdjfbksdfsvdsdfhjksdfhksjdfjskdfbjksdbfskdbgfssdfsdkfbsdkjbfksdjfbksdfsvdsdfhjksdfhksjdfjskdfbjksdbfskdbgfssdfsdkfbsdkjbfksdjfbksdfsvdsdfhjksdfhksjdfjskdfbjksdbfskdbgfssdfsdkfbsdkjbfksdjfbksdfsvdsdfhjksdfhksjdfjskdfbjksdbfskdbgfssdfsdkfbsdkjbfksdjfbksdfsvdsdfhjksdfhksjdfjskdfbjksdbfskdbgfssdfsdkfbsdkjbfksdjfbksdfsvdsdfhjksdfhksjdfjskdfbjksdbfskdbgfssdfsdkfbsdkjbfksdjfbksdfsvdsdfhjksdfhksjdfjskdfbjksdbfskdbgfssdfsdkfbsdkjbfksdjfbksdfsvdsdfhjksdfhksjdfjskdfbjksdbfskdbgfssdfsdkfbsdkjbfksdjfbksdfsvdsdfhjksdfhksjdfjskdfbjksdbfskdbgfssdfsdkfbsdkjbfksdjfbksdfsvdsdfhjksdfhksjdfjskdfbjksdbfskdbgfssdfsdkfbsdkjbfksdjfbksdfsvdsdfhjksdfhksjdfjskdfbjksdbfskdbgfssdfsdkfbsdkjbfksdjfbksdfsvdsdfhjksdfhksjdfjskdfbjksdbfskdbgfssdfsdkfbsdkjbfksdjfbksdfsvdsdfhjksdfhksjdfjskdfbjksdbfskdbgfssdfsdkfbsdkjbfksdjfbksdfsvdsdfhjksdfhksjdfjskdfbjksdbfskdbgfssdfsdkfbsdkjbfksdjfbksdfsvdsdfhjksdfhksjdfjskdfbjksdbfskdbgfssdfsdkfbsdkjbfksdjfbksdfsvdsdfhjksdfhksjdfjskdfbjksdbfskdbgfssdfsdkfbsdkjbfksdjfbksdfsvdsdfhjksdfhksjdfjskdfbjksdbfskdbgfssdfsdkfbsdkjbfksdjfbksdfsvdsdfhjksdfhksjdfjskdfbjksdbfskdbgfssdfsdkfbsdkjbfksdjfbksdfsvddjfgbdcfdsfbjsdkfbskdfbksdfbksdfbjksdbfksdbfksdbfksdfbdskbfksjfgbdjkfhbgdfkgbsfsdbfskdfbsksdfhjksdfhksjdfjskdfbjksdbfskdbgfssdfsdkfbsdkjbfksdjfbksdfsvdsfskjhhjvgvhsdfasaewrerergergergergertertevcxvxcvsdsdfgdfgdfgdfgdfgdgfdgnnnnndsvcfjsdfvjsdvfksdavfvfdsjhbdjhfgbjhdfbgdhjfgjdhfgbjdhfbgjhdfbgvnvnvbnvnvbnvnbvnbjhfjfhjfjfjfjfjfhjdfbgsdfhjksdfhksjdfjskdfbjksdbfskdbgfssdfsdkfbsdkjbfksdjfbksdfsvdsdfhjksdfhksjdfjskdfbjksdbfskdbgfssdfsdkfbsdkjbfksdjfbksdfsvdsdfhjksdfhksjdfjskdfbjksdbfskdbgfssdfsdkfbsdkjbfksdjfbksdfsvdsdfhjksdfhksjdfjskdfbjksdbfskdbgfssdfsdkfbsdkjbfksdjfbksdfsvdsdfhjksdfhksjdfjskdfbjksdbfskdbgfssdfsdkfbsdkjbfksdjfbksdfsvdsdfhjksdfhksjdfjskdfbjksdbfskdbgfssdfsdkfbsdkjbfksdjfbksdfsvdsdfhjksdfhksjdfjskdfbjksdbfskdbgfssdfsdkfbsdkjbfksdjfbksdfsvdsdfhjksdfhksjdfjskdfbjksdbfskdbgfssdfsdkfbsdkjbfksdjfbksdfsvdsdfhjksdfhksjdfjskdfbjksdbfskdbgfssdfsdkfbsdkjbfksdjfbksdfsvdsdfhjksdfhksjdfjskdfbjksdbfskdbgfssdfsdkfbsdkjbfksdjfbksdfsvdsdfhjksdfhksjdfjskdfbjksdbfskdbgfssdfsdkfbsdkjbfksdjfbksdfsvdsdfhjksdfhksjdfjskdfbjksdbfskdbgfssdfsdkfbsdkjbfksdjfbksdfsvdsdfhjksdfhksjdfjskdfbjksdbfskdbgfssdfsdkfbsdkjbfksdjfbksdfsvdsdfhjksdfhksjdfjskdfbjksdbfskdbgfssdfsdkfbsdkjbfksdjfbksdfsvdsdfhjksdfhksjdfjskdfbjksdbfskdbgfssdfsdkfbsdkjbfksdjfbksdfsvdsdfhjksdfhksjdfjskdfbjksdbfskdbgfssdfsdkfbsdkjbfksdjfbksdfsvdsdfhjksdfhksjdfjskdfbjksdbfskdbgfssdfsdkfbsdkjb&quot;;
	
	ArrayList&lt;Mutation&gt; mutations = new ArrayList&lt;&gt;();

	for (int i = 0; i &lt; 50; i = i + 1) {
		float limitAmt 		= Float.parseFloat(RandomStringUtils.randomNumeric(4));
		float balance 	= 1000 + limitAmt;
		
		String userId 	  	= UUID.randomUUID().toString();	
		Mutation user_bal_mutation = Mutation.newInsertBuilder(&quot;user_bal&quot;)
							.set(&quot;userId&quot;)
							.to(userId)
							.set(&quot;balance&quot;)
							.to(balance)
							.set(&quot;creationTime&quot;)
							.to(createdDate)
							.set(&quot;engmtLvl&quot;)
							.to(data)
							.set(&quot;streakDay&quot;)
							.to(data)
							.set(&quot;source&quot;)
							.to(data)
							.build();
		mutations.add(user_bal_mutation);
		
		String transactionId 	  	= UUID.randomUUID().toString();
		Mutation user_txn_mutation = Mutation.newInsertBuilder(&quot;user_txns&quot;)
							.set(&quot;userId&quot;)
							.to(userId)
							.set(&quot;transactionId&quot;)
							.to(transactionId)
							.set(&quot;amount&quot;)
							.to(limitAmt)
							.set(&quot;creationTime&quot;)
							.to(createdDate)
							.set(&quot;streakDay&quot;)
							.to(data)
							.set(&quot;RewardType&quot;)
							.to(data)
							.build();
		
		mutations.add(user_txn_mutation);
	}
	
	dbClient.write(mutations);

} catch (Exception e) {
    System.out.println(e.toString());
} 

//Random randomNum = new Random();
//int low = 1;
//int high = props.get(&quot;maxSamplingSize&quot;); //Change here to suit for sampling size
//int number = randomNum.nextInt(high - low) + low; 
//vars.put(&quot;UserId_&quot; + number.toString(), userId);
//log.info(&quot;insert --&gt;thread({}): modify UserId({}) with {}&quot;,${__threadNum},number, userId);

</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Insert Data" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${iterations}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user_bal insert" enabled="true">
          <stringProp name="dataSource">conn_pool</stringProp>
          <stringProp name="query">insert into user_bal (UserId, Balance, CreationTime) values (?,?,?)</stringProp>
          <stringProp name="queryArguments">${UserId},${Balance},${CreationTime}</stringProp>
          <stringProp name="queryArgumentsTypes">VARCHAR,DOUBLE,TIMESTAMP</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Prepared Update Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-1752163738">UserId</stringProp>
              <stringProp name="1325467324">Balance</stringProp>
              <stringProp name="1750336108">CreationTime</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="1913419542">
                <stringProp name="118040362">${__UUID()}</stringProp>
                <stringProp name="48">0</stringProp>
                <stringProp name="-1728534736">${__time(yyyy-MM-dd hh:mm:ss)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
            <stringProp name="TestPlan.comments">Random generated values to populate database</stringProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user_txns insert" enabled="true">
            <stringProp name="dataSource">conn_pool</stringProp>
            <stringProp name="query">insert into user_txns (UserId, TransactionId, Amount, CreationTime) values (?,?,?,?);</stringProp>
            <stringProp name="queryArguments">${UserId},${TransactionId},${Amount},${CreationTime_txn}</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,DOUBLE,TIMESTAMP</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="1247202425">TransactionId</stringProp>
                <stringProp name="1964981368">Amount</stringProp>
                <stringProp name="1084349975">CreationTime_txn</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1638795965">
                  <stringProp name="118040362">${__UUID()}</stringProp>
                  <stringProp name="-2048415973">${__Random(0,3000)}</stringProp>
                  <stringProp name="-1728534736">${__time(yyyy-MM-dd hh:mm:ss)}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Update total balance" enabled="true">
            <stringProp name="dataSource">conn_pool</stringProp>
            <stringProp name="queryType">Prepared Update Statement</stringProp>
            <stringProp name="query">update user_bal set Balance = Balance + ? where UserId = ?;</stringProp>
            <stringProp name="queryArguments">${Amount},${UserId}</stringProp>
            <stringProp name="queryArgumentsTypes">DOUBLE,VARCHAR</stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="Backend Listener" enabled="true">
          <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="influxdbMetricsSender" elementType="Argument">
                <stringProp name="Argument.name">influxdbMetricsSender</stringProp>
                <stringProp name="Argument.value">org.apache.jmeter.visualizers.backend.influxdb.HttpMetricsSender</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="influxdbUrl" elementType="Argument">
                <stringProp name="Argument.name">influxdbUrl</stringProp>
                <stringProp name="Argument.value">http://jmeter-influxdb:8086/write?db=jmeter</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="application" elementType="Argument">
                <stringProp name="Argument.name">application</stringProp>
                <stringProp name="Argument.value">application name</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="measurement" elementType="Argument">
                <stringProp name="Argument.name">measurement</stringProp>
                <stringProp name="Argument.value">jmeter</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="summaryOnly" elementType="Argument">
                <stringProp name="Argument.name">summaryOnly</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="samplersRegex" elementType="Argument">
                <stringProp name="Argument.name">samplersRegex</stringProp>
                <stringProp name="Argument.value">.*</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="percentiles" elementType="Argument">
                <stringProp name="Argument.name">percentiles</stringProp>
                <stringProp name="Argument.value">99;95;90</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="testTitle" elementType="Argument">
                <stringProp name="Argument.name">testTitle</stringProp>
                <stringProp name="Argument.value">Test name</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="eventTags" elementType="Argument">
                <stringProp name="Argument.name">eventTags</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="classname">org.apache.jmeter.visualizers.backend.influxdb.InfluxdbBackendListenerClient</stringProp>
        </BackendListener>
        <hashTree/>
      </hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="create sampled csv data" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Sampling UserID" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.google.cloud.spanner.*;


DatabaseClient dbClient = props.get(&quot;dbClient&quot;);

// Create a list of sampling user_ref_id before testing
// Note: Please change limit to 10000
String readUserIdSql=&quot;SELECT userId FROM user_profile TABLESAMPLE BERNOULLI (50 PERCENT) limit 1000;&quot;;
Statement stmt = Statement.newBuilder(readUserIdSql).build();

ResultSet result = dbClient
	.singleUseReadOnlyTransaction()
	.executeQuery(stmt);

StringBuilder csv_result = new StringBuilder();
int count = 0;

// Store sampling user_ref_id in the JmeterProperties for future use by other threads*
while (result.next()) {
	count = count+1;
	//log.info(&quot;count({}), thread({}):{}&quot;,count, ${__threadNum},result.getString(&quot;user_ref_id&quot;));
	//vars.put(&quot;UserId_&quot; + count.toString(),result.getString(&quot;user_ref_id&quot;) )
	csv_result.append(result.getString(&quot;userId&quot;));
	csv_result.append(System.getProperty(&quot;line.separator&quot;));

}
org.apache.commons.io.FileUtils.writeStringToFile(new File(&quot;/data/userId.csv&quot;), csv_result.toString(), &quot;UTF-8&quot;);
result.close();</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Sampling DeviceID" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.google.cloud.spanner.*;


DatabaseClient dbClient = props.get(&quot;dbClient&quot;);

// Create a list of sampling user_ref_id before testing
// Note: Please change limit to 10000
String readUserIdSql=&quot;SELECT deviceId FROM device_profile TABLESAMPLE BERNOULLI (50 PERCENT) limit 1000;&quot;;
Statement stmt = Statement.newBuilder(readUserIdSql).build();

ResultSet result = dbClient
	.singleUseReadOnlyTransaction()
	.executeQuery(stmt);

StringBuilder csv_result = new StringBuilder();
int count = 0;

// Store sampling user_ref_id in the JmeterProperties for future use by other threads*
while (result.next()) {
	count = count+1;
	//log.info(&quot;count({}), thread({}):{}&quot;,count, ${__threadNum},result.getString(&quot;device_id&quot;));
	//vars.put(&quot;DeviceId_&quot; + count.toString(),result.getString(&quot;device_id&quot;) )
	csv_result.append(result.getString(&quot;deviceId&quot;));
	csv_result.append(System.getProperty(&quot;line.separator&quot;));

}
org.apache.commons.io.FileUtils.writeStringToFile(new File(&quot;/data/deviceId.csv&quot;), csv_result.toString(), &quot;UTF-8&quot;);
result.close();</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Create Sampled CSV Data" enabled="false">
        <stringProp name="TestPlan.comments">Fetches sampled data from Spanner for the load test</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Fetch UserIds" enabled="true">
          <stringProp name="TestPlan.comments">Create CSV for sample UserIds to be used for perf test.</stringProp>
          <stringProp name="dataSource">conn_pool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT UserId FROM user_bal TABLESAMPLE BERNOULLI (50 PERCENT) limit 50000;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="JDBC PreProcessor" enabled="true">
            <stringProp name="dataSource">conn_pool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT UserId FROM user_bal TABLESAMPLE BERNOULLI (50 PERCENT) limit 50000;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable">resultSet</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCPreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">resultSet = vars.getObject(&quot;resultSet&quot;);
StringBuilder result = new StringBuilder();

for (Object row : resultSet ) {
    iter = row.entrySet().iterator();
    while (iter.hasNext()) {
        pair = iter.next();
        result.append(pair.getValue());
    }
    result.append(System.getProperty(&quot;line.separator&quot;));
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(&quot;/data/userId.csv&quot;), result.toString(), &quot;UTF-8&quot;);</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Fetch TransactionIds" enabled="true">
          <stringProp name="TestPlan.comments">Create CSV for sample UserIds, TransactionIds to be used for perf test.</stringProp>
          <stringProp name="dataSource">conn_pool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT TransactionId FROM user_txns TABLESAMPLE BERNOULLI (50 PERCENT) limit 50000;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="JDBC PreProcessor" enabled="true">
            <stringProp name="dataSource">conn_pool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT TransactionId FROM user_txns TABLESAMPLE BERNOULLI (50 PERCENT) limit 50000;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable">resultSet</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCPreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">resultSet = vars.getObject(&quot;resultSet&quot;);
StringBuilder result = new StringBuilder();

for (Object row : resultSet ) {
    iter = row.entrySet().iterator();
    while (iter.hasNext()) {
        pair = iter.next();
        result.append(pair.getValue());
    }
    result.append(System.getProperty(&quot;line.separator&quot;));
}

org.apache.commons.io.FileUtils.writeStringToFile(new File(&quot;/data/txnId.csv&quot;), result.toString(), &quot;UTF-8&quot;);</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
